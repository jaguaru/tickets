"""
Django settings for ticket_management project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

<<<<<<< HEAD
from dotenv import dotenv_values
get_env_var = dotenv_values()

=======
>>>>>>> main
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
<<<<<<< HEAD
SECRET_KEY = get_env_var['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env_var['DEBUG']
=======
SECRET_KEY = 'django-insecure-uxe7xzgff57=%&^#y#h^wi2#kgxq*9k(q3t)t=dom0d_h2qa**'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
>>>>>>> main

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

<<<<<<< HEAD
    'ticket_management',
    
    'rest_framework',
    'rest_framework.authtoken',

    'celery',
    'cloudinary',

=======
    'ticket_app',

    'rest_framework',
    'rest_framework.authtoken',
>>>>>>> main
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ticket_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ticket_management.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
<<<<<<< HEAD
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': get_env_var['NAME'],
        'USER': get_env_var['USER'],
        'PASSWORD': get_env_var['PASS'],
        'HOST': get_env_var['HOST'],
        'PORT': int(get_env_var['PORT']),
=======
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
>>>>>>> main
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
<<<<<<< HEAD

# Celery Configuration
CELERY_BROKER_URL = get_env_var['BROKER_URL']
CELERY_RESULT_BACKEND = get_env_var['RESULT_BACKEND']

CELERY_TASK_DEFAULT_QUEUE = 'default'

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CELERY_REDIRECT_STDOUTS = get_env_var['REDIRECT_STDOUTS']

CELERY_BROKER_CONNECTION_RETRY = get_env_var['CONNECTION_RETRY']
CELERY_BROKER_CONNECTION_MAX_RETRIES = int(get_env_var['CONNECTION_MAX_RETRIES'])
CELERY_BROKER_CONNECTION_RETRY_INTERVAL = int(get_env_var['CONNECTION_RETRY_INTERVAL'])
=======
>>>>>>> main
